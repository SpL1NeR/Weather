{"version":3,"sources":["components/info.js","components/Form.js","components/weather.js","components/header.js","App.js","serviceWorker.js","index.js"],"names":["Info","Form","props","onSubmit","weatherMethod","type","name","placeholder","Weather","className","city","id","country","src","icon","temp_min","temp_max","temp","humad","wind","lassName","error","Header","width","API_KEY","App","state","undefined","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","setState","main","feels_like","humidity","speed","weather","sys","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.75258f0d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Info = () => (\r\n\t<div>\r\n<p>Проект з web дизайну <br/> студента групи 31-КН <br/> Герговського Олексія</p>\r\n      </div>\r\n      );\r\n\r\nexport default Info;\r\n ","import React from \"react\";\r\n\r\nconst Form = props => (\r\n\t<form onSubmit={props.weatherMethod}>\r\n<input type=\"text\" name=\"city\" placeholder = \"Enter city\"/>\r\n<button>Your weather</button>\r\n</form>\r\n);\r\nexport default Form;\r\n ","import React from \"react\";\r\n\r\nconst Weather = (props) =>{\r\n\treturn(\r\n\t\t <div className=\"infoWeath\">\r\n      {props.city && \r\n      \t<div id=\"fw\"> \r\n      \t<div>\r\n      \t<div> <h3>{props.city},{props.country}</h3></div>\r\n      \t<div>  \r\n      \t<img src={'https://openweathermap.org/img/wn/'+ props.icon+'.png' }/></div>\r\n\r\n\t\t<div id=\"tw\"> <p>Мін </p> <p>{props.temp_min}</p> </div>\r\n\t\t<div id=\"tt\"> <p>Макс</p> <p>{props.temp_max}</p> </div>\r\n</div>\r\n\t\t<div id=\"db\">\r\n\t\t<div> <p>Температура відчуваєтьс як: {props.temp}</p></div>\r\n\t\t<div> <p>Вологість:{props.humad}%</p></div>\r\n \t\t<div> <p>Швидкість вітру:{props.wind}М/С</p></div>\r\n\t\t</div>\t\r\n\t\t</div>\r\n\r\n}\r\n <p lassName=\"error\" id=\"error\">{props.error}</p>\r\n      </div>);\r\n}\r\n\r\nexport default Weather;\r\n ","import React from \"react\";\r\n\r\nconst Header = (props) =>{\r\n\treturn(\r\n\t\t <div className=\"Header\">\r\n                   <form onSubmit={props.weatherMethod}>\r\n     <div ><img src={'https://openweathermap.org/img/wn/'+ props.icon+'.png' } width=\"30%\"/>Effect_weather</div>\r\n            </form>\r\n      </div>\r\n      );\r\n}\r\n\r\nexport default Header;\r\n ","import React from \"react\";\nimport Info from \"./components/info\"\nimport Form from \"./components/Form\"\nimport Weather from \"./components/weather\"\nimport Header from \"./components/header\"\nimport Icon from \"./components/client_location\";\n//import address from \"./components/client_location\"\n\nconst API_KEY = \"b800dc9ba36fbab6cb5f208a133db8cf\";\n\nclass App extends React.Component {\n\n  state = {\n    city: undefined,\n    temp: undefined,\n    country: undefined,\n    temp_min: undefined,\n    temp_max: undefined,\n    error: \"enter city name\",\n    icon: undefined\n  }\n\n  gettingWeather = async (e) => {\n    e.preventDefault();\n    var city = e.target.elements.city.value;\n    \n\n    if (city) {\n\n\n      const api_url = await\n\n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&lang=ua,uk&units=metric`);\n      const data = await api_url.json();\n\n      this.setState({\n        temp: data.main.feels_like,\n        humad: data.main.humidity,\n        city: data.name,\n        wind: data.wind.speed,\n        icon: data.weather[0].icon,\n        country: data.sys.country,\n        temp_min: data.main.temp_min,\n        temp_max: data.main.temp_max,\n        error: undefined\n      });\n    } else {\n      this.setState({\n        city: undefined,\n        humad: undefined,\n        wind: undefined,\n        temp: undefined,\n        country: undefined,\n        temp_min: undefined,\n        temp_max: undefined,\n        icon: undefined,\n        error: \"enter city name\",\n      });\n    }\n  }\n  render() {\n    return (\n\n      <div className=\"wrapper\">\n        <div className=\"Head_cont\">\n        \n          <Header  city={this.state.city}\n                  icon={this.state.icon}\n               />\n          <Form weatherMethod={this.gettingWeather}\n           />\n        \n        </div>\n        <div className=\"main\">\n          <div className=\"conteiner\">\n            <div className=\"row\">\n              <div className=\"col-sm-5 info\">\n                <Info />\n              </div>\n              <div className=\"wethinf\">\n\n                <Weather\n                  temp={this.state.temp}\n                  city={this.state.city}\n                  country={this.state.country}\n                  temp_min={this.state.temp_min}\n                  temp_max={this.state.temp_max}\n                  icon={this.state.icon}\n                  wind={this.state.wind}\n                  humad={this.state.humad}\n                  error={this.state.error} />\n              \n              </div>\n\n\n\n            </div>\n          </div>\n          <header         \n             />\n        </div>\n\n\n      </div>\n    );\n\n  }\n\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}